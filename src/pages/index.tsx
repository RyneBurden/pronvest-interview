import Head from "next/head";
import Image from "next/image";
import { Inter } from "@next/font/google";
import styles from "@/styles/Home.module.css";
import { useFormik } from "formik";
import { useState } from "react";

import stockData from "../stocks.json";

const inter = Inter({ subsets: ["latin"] });

interface Portfolio {
  value: number;
  error?: string;
}

function getPortfolioValue(portfolioString: string): Portfolio {
  try {
    const queriedStocks = portfolioString.replaceAll('"', "").split(",");

    const totalPortfolioWorth = queriedStocks.reduce((prev, current) => {
      const [queriedTicker, queriedAmount] = current.split(":");
      const queriedStock = stockData.filter(
        (entry) => entry.ticker === queriedTicker
      );

      if (!queriedStock[0])
        throw new Error(
          `${queriedTicker} is not a valid stock, please try again.`
        );
      else {
        const queriedStockWorth = Number(queriedAmount) * queriedStock[0].close;

        return prev + queriedStockWorth;
      }
    }, 0);

    return { value: totalPortfolioWorth };
  } catch (err: any) {
    return { value: 0, error: err };
  }
}

interface ProfitOutput {
  profit: number;
  dayToBuy?: number;
  dayToSell?: number;
  error?: string;
}

function maximizeProfit(stockPriceByDay: string): ProfitOutput {
  const parsedData = stockPriceByDay
    .replaceAll('"', "")
    .split(",")
    .map((price) => Number(price));

  const maxPriceIndex = parsedData.indexOf(Math.max(...parsedData));
  const minPriceIndex = parsedData.indexOf(Math.min(...parsedData));

  let dayToSell = 0;
  const maxProfit = parsedData.reduce((runningProfit, current, index) => {
    if (index > minPriceIndex) {
      const potentialProfit = current - parsedData[minPriceIndex];

      if (potentialProfit > runningProfit) {
        dayToSell = index + 1;
        return potentialProfit;
      } else return runningProfit;
    }

    return 0;
  }, 0);

  if (maxProfit === 0) return { profit: 0 };
  else return { profit: maxProfit, dayToBuy: minPriceIndex + 1, dayToSell };
}

const numberFormat = new Intl.NumberFormat("en-US", {
  style: "currency",
  currency: "USD",
});

function handlePart1(queriedStocks: string): string {
  const portfolio = getPortfolioValue(queriedStocks);
  if (!portfolio.error)
    return `The queried portfolio is worth ${numberFormat.format(
      portfolio.value
    )}.`;

  return `${portfolio.error}`;
}

// This is used for both -part2 and -bonus. I couldn't tell them apart so I wanted to handle both cases
function handlePart2(pricesByDay: string): string {
  const profitInfo = maximizeProfit(pricesByDay);
  if (profitInfo.profit > 0)
    return `Buy on day ${profitInfo.dayToBuy} and sell on day ${
      profitInfo.dayToSell
    } for a profit of ${numberFormat.format(profitInfo.profit)}.`;

  return "No profitable buy/sell options listed.";
}

export default function Home() {
  const [output, setOutput] = useState<string>("");

  const formik = useFormik({
    initialValues: { command: "" },
    onSubmit: (values) => {
      const [part, data] = values.command.split(" ");

      if (!data) setOutput("Invalid input");
      else
        switch (part) {
          case "-part1":
            setOutput(handlePart1(data));
            break;
          case "-part2":
            setOutput(handlePart2(data));
            break;
          case "-bonus":
            setOutput(handlePart2(data));
            break;
          default:
            setOutput(
              "Invalid option. Try '-part1' or '-part2' or '-bonus' and make sure to leave out the executable call."
            );
            break;
        }
    },
  });

  return (
    <>
      <Head>
        <title>Ryne Burden Sample App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="h-screen w-screen flex items-center justify-center">
        <div className="h-fit w-screen lg:w-1/2 bg-gray-700 rounded-md p-6 space-y-4">
          <div className="h-fit w-full flex items-center">
            <form
              className="w-full flex space-x-3"
              onSubmit={formik.handleSubmit}
            >
              <input
                onChange={formik.handleChange}
                onReset={formik.handleReset}
                className="w-full p-2 rounded focus-none"
                type="text"
                name="command"
                placeholder="test case"
                value={formik.values.command}
              />
              <button className="bg-gray-600 p-2 rounded" type="submit">
                Submit
              </button>
              <button
                className="bg-gray-600 p-2 rounded"
                type="button"
                onClick={() => {
                  formik.resetForm();
                  setOutput("");
                }}
              >
                Reset
              </button>
            </form>
          </div>
          <div className="h-16 w-full rounded bg-gray-600 flex items-center justify-center p-2 transition-all">
            {output}
          </div>
        </div>
      </main>
    </>
  );
}
