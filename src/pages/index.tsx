import Head from "next/head";
import Image from "next/image";
import { Inter } from "@next/font/google";
import styles from "@/styles/Home.module.css";
import { useFormik } from "formik";
import { useState } from "react";

import stockData from "../stocks.json";

const inter = Inter({ subsets: ["latin"] });

interface Portfolio {
  value: number;
  error?: string;
}

function getPortfolioValue(portfolioString: string): Portfolio {
  try {
    const queriedStocks = portfolioString.replaceAll('"', "").split(",");

    const totalPortfolioWorth = queriedStocks.reduce((prev, current) => {
      const [queriedTicker, queriedAmount] = current.split(":");
      const queriedStock = stockData.filter(
        (entry) => entry.ticker === queriedTicker
      );

      if (!queriedStock[0])
        throw new Error(`${queriedTicker} is not available for parsing.`);
      else {
        const queriedStockWorth = Number(queriedAmount) * queriedStock[0].close;

        return prev + queriedStockWorth;
      }
    }, 0);

    return { value: totalPortfolioWorth };
  } catch (err: any) {
    return { value: 0, error: err };
  }
}

interface ProfitOutput {
  profit: number;
  dayToBuy?: number;
  dayToSell?: number;
  error?: string;
}

function maximizeProfit(stockPriceByDay: string): ProfitOutput {
  const parsedData = stockPriceByDay
    .replaceAll('"', "")
    .split(",")
    .map((price) => Number(price));

  const maxPriceIndex = parsedData.indexOf(Math.max(...parsedData));
  const minPriceIndex = parsedData.indexOf(Math.min(...parsedData));

  let dayToSell = 0;
  const maxProfit = parsedData.reduce((runningProfit, current, index) => {
    if (index > minPriceIndex) {
      const potentialProfit = current - parsedData[minPriceIndex];

      if (potentialProfit > runningProfit) {
        dayToSell = index + 1;
        return potentialProfit;
      } else return runningProfit;
    }

    return 0;
  }, 0);

  if (maxProfit === 0) return { profit: 0 };
  else return { profit: maxProfit, dayToBuy: minPriceIndex + 1, dayToSell };
}

export default function Home() {
  const formik = useFormik({
    initialValues: { command: "" },
    validate: (values) => {},
    onSubmit: (values) => {
      const [part, data] = values.command.split(" ");
      switch (part) {
        case "-part1":
          const portfolio = getPortfolioValue(data);
          if (!portfolio.error) setOutput(`$${portfolio.value}`);
          else setOutput(`${portfolio.error}`);
          break;
        case "-bonus":
          const profitInfo = maximizeProfit(data);
          if (profitInfo.profit > 0)
            setOutput(
              `Buy on day ${profitInfo.dayToBuy} and sell on day ${profitInfo.dayToSell} for a profit of $${profitInfo.profit}.`
            );
          else setOutput("No profitable buy/sell options listed.");
          break;
        default:
          setOutput("Invalid option. Try '-part1' or '-bonus'");
          break;
      }
    },
  });

  const [output, setOutput] = useState<string>("");
  return (
    <>
      <Head>
        <title>Ryne Burden Sample App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="h-screen w-screen flex items-center justify-center">
        <div className="h-1/2 w-1/2 bg-green-200 rounded-md p-3">
          <div className="h-1/6 w-full bg-violet-400 flex items-center">
            <form
              className="w-full flex space-x-3"
              onSubmit={formik.handleSubmit}
            >
              <input
                onChange={formik.handleChange}
                className="w-full p-2 rounded"
                type="text"
                name="command"
              />
              <button className="bg-gray-600 p-2 rounded" type="submit">
                Submit
              </button>
              <button
                className="bg-gray-600 p-2 rounded"
                type="button"
                onClick={() => formik.resetForm()}
              >
                Reset
              </button>
            </form>
          </div>
          <div className="h-5/6 w-full bg-violet-500">{output}</div>
        </div>
      </main>
    </>
  );
}
